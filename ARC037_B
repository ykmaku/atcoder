#include <iostream>
#include <string>
#include <algorithm>
#include <cstdio>
#include <vector>
#include <queue>
#include <set>
#include <numeric>
#include <cmath>

using namespace std;

typedef long long int lld;

const lld mod = 1e9+7;
const lld INF = 1e9;
//const lld MAXN = 1e9;

vector<int> list[100];
bool ch[100];
bool flag;

void dfs(int i,int par)
{
	for(int j = 0; j < list[i].size(); j++)
	{
		if(!ch[list[i][j]] && list[i][j] != par)
		{
			flag = false;
		}
		else if(ch[list[i][j]])
		{
			ch[list[i][j]] = false, dfs(list[i][j],i);
		}
	}
}

int main()
{
	int n,m;
	cin >> n >> m;
	vector<pair<int,int> > p(m);
	for(int i = 0; i < m; i++)
	{
		cin >> p[i].first >> p[i].second;
	}

	for(int i = 0; i < m; i++)
	{
		list[p[i].first-1].push_back(p[i].second-1);
		list[p[i].second-1].push_back(p[i].first-1);
	}

	for(int i = 0; i < n; i++)
	{
		ch[i] = true;
	}

	int ans = 0;

	for(int i = 0; i < n; i++)
	{
		if (ch[i])
		{
			ch[i] = false;
			flag = true;
			dfs(i,i);
			if(flag) ans++;
		}
	}

	cout << ans << endl;

	return 0;
}
